[module string(	'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[comment méthodes de base pour le formattage des chaînes de caractères. 

	Pour la gestion correcte des sauts de lignes, la règle est la suivante : 
	- Les templates ne doivent avoir aucun saut de ligne.
	- Toute demande de saut est effectuée avec 'ensureBlankLine()' qui positionne un marqueur.
	- Au niveau du template le plus haut, faire appel à la query de post traitement 'escapeFile()'.
	/]

[import fr::pacman::front::core::service::StringUtils/]
[comment import fr::pacman::core::service::DateUtils/]

[comment vérifie si un chaine n'est pas nulle ou vide./]
[query public exists(str : String ) : Boolean  = str <> null and str.trim().size() > 0/]

[comment retourne la ligne expurgée des caractères spéciaux interdits./]
[query public sanitize(str : String) : String = str.trim().normalize().do_sanitize()/]
  
[comment retourne la ligne expurgée des caractères spéciaux interdits./]
[query public sanitizeComment(str : String) : String = str.replaceAll('\\*','')/]

[comment retourne la ligne avec suppression des caractères spéciaux et remplacement par leurs équivalents./]
[query public normalize(str : String) : String = str.do_normalize()/]

[comment retourne la ligne expurgée de la chaine passée en paramètre (ou que soit la chaine)./]  
[query public removeIgnoreCase(str : String, target : String) : String = if (str.toLower()
  .index(target.toLower()) > -1) then str.substring(0, str.toLower().index(target.toLower())) 
  + str.substring(str.toLower().index(target.toLower()) + target.size(), str.size()) else str endif/]

[comment retourne la ligne avec  échappement et mise en majuscules./]
[query public safeUpper(str : String) : String = str.sanitize().toUpper()/]
  
[comment retourne la ligne avec  échappement et mise en minuscules./]
[query public safeLower(str : String) : String = str.sanitize().toLower()/]
  
[comment retourne la ligne avec notation CamelCase d'une chaine de caractères./]
[query public safeCamelCase(str : String) : String = str.sanitize().do_camelCase()/]
  
[comment retourne la ligne avec échappement et mise premier caractère en majuscule./]
[query public safeUpperFirst(str : String) : String = str.sanitize().toUpperFirst()/]
  
[comment retourne la ligne avec échappement et mise premier caractère en minuscule./]  
[query public safeLowerFirst(str : String) : String = str.sanitize().toLowerFirst()/]

[comment retourne la ligne avec les caractères de fin de commentaire./]
[query public ensureSlashLine(str : String, size : Integer) : String = str.do_slashLine(size)/]
  
[comment affecte un marqueur pour demander une ligne vide avec retour à la ligne./]
[query public ensureBlankLine(any : ecore::EObject) : String  = '@CR'/]
 
[comment retourne la ligne pour le tableau avec une taille et un séparateur./]
[query public ensureTabCell(str : String, size : Integer, separator : String) : String = str.do_tabCell(size, separator)/]
  
[comment insère une chaine de caractères (c) avant une chaîne (r)./]
[query public insert(str : String, c : String, r : String) : String = str.replace(r, c + r)/]

[comment découpe (avec un retour à la ligne) une longue chaine de caractères./]
[query public lineCut(str : String, nbChars : Integer, char : String) : String = str.do_cut(nbChars, str.lineSeparator(), char).sanitize(nbChars)/]

[comment assure que la chaine découpée n'a pas d'éspace à chaque césure et renvoie le traitement pour ajout ligne blanche./]
[query private sanitize(str : String, nbChars : Integer) : String = str.replaceAll('(?m)^\\s*','').ensureBlankLine(nbChars)/]

[comment si la chaine à été découpée, ajoute une ligne blanche pour une meilleur visibilité./]
[query private ensureBlankLine(str : String, nbChars : Integer) : String = if(str.size() > nbChars) then str + str.ensureBlankLine() else str endif/]

[comment découpe (avec un retour à la ligne) une longue chaine de caractères./]
[query public lineCut(str : String, nbCols : Integer) : String = str.lineCut(nbCols, null)/]

[comment retourne la les lignes de commentaires échappées des retours à la ligne./]  
[query public escapeComment(str : String) : String = str.replaceAll('[\n|\r|\\*]','').replace('\\.$','')/]
  
[comment retourne la les lignes de commentaires échappées des retours à la ligne./]  
[query public escapeSqlComment(str : String) : String = str.escapeComment().replaceAll('\'','\'\'')/]

[comment retourne le script SQL débarrasé des lignes vides issues de la génération./]
[query public escapeFile(str : String) : String = str.escapeFile(true)/]
  
[comment retourne le script SQL débarrasé des lignes vides issues de la génération (escape pour debug si besoin)./]
[query public escapeFile(str : String, escape : Boolean) : String = + if escape then str.escapeUnwantedBlankLines() else str endif  /]

[comment retourne le script SQL débarrasé des lignes vides issues de la génération./]	
[query private escapeUnwantedBlankLines(str : String): String = str.replaceAll('\\s+@CR','@CR').replaceAll('(?m)^\\s*' + str.lineSeparator(),'')
	.replaceAll('@CR', str.lineSeparator())/]

[comment vérifie si la chaine que l'on veut écrire doit etre entre guillemets./]
[query public needsToBeQuoted(type : String) : Boolean = 'String'.equalsIgnoreCase(type) or 'Char'.equalsIgnoreCase(type)/]