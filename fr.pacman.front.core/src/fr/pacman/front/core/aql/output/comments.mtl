[comment encoding = UTF-8 /]
[module comments(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
					'http://www.obeonetwork.org/dsl/soa/4.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0')/]

[import fr::pacman::front::core::aql::base/]
[import fr::pacman::front::core::aql::string/]
[import fr::pacman::front::core::aql::name::eobjects/]
[import fr::pacman::front::core::aql::query::eobject/]
[import fr::pacman::front::core::aql::query::operation/]
[import fr::pacman::front::core::aql::rule::parameter/]
[import fr::pacman::front::core::aql::rule::attribute/]

[comment ./]
[template public commentMultiLines(s : String)]
  /**
   * [if (s.exists())][s.sanitizeComment()/][else][s.cNoDescription()/][/if].
   */
[/template]

[comment ./]
[template public commentSingleLine(s : String)]
  /** [if (s.exists())][s.sanitizeComment()/][else][s.cNoDescription()/][/if]. */
[/template]

[comment ./]
[template public commentGet(e : entity::Entity)]
  
  /** 
   * Retourne l'attribut '[e.name().apply_attributeDefault()/]'. 
   *
   * @return la valeur de l'attribut '[e.name().apply_attributeDefault()/]'.
   */
[/template]

[comment ./]
[template public commentSet(e : entity::Entity)]
  /**
   * Affectation de l'attribut '[e.name().apply_attributeDefault()/]'. 
   *
   * @param [e.name().apply_parameterMethodClassicIn()/] la valeur à affecter pour l'attribut '[e.name().apply_attributeDefault()/]'.
   */
[/template]

[template public commentGet(s : String)]
  
  /** 
   * Retourne l'attribut '[s.apply_attributeDefault()/]'. 
   *
   * @return la valeur de l'attribut '[s.apply_attributeDefault()/]'.
   */
[/template]

[comment ./]
[template public commentSet(s : String)]
  /**
   * Affectation de l'attribut '[s.apply_attributeDefault()/]'. 
   *
   * @param [s.apply_parameterMethodClassicIn()/] la valeur à affecter pour l'attribut '[s.apply_attributeDefault()/]'.
   */
[/template]

[comment ./]
[template public commentGet(d : environment::DTO)]
  
  /** 
   * Retourne l'attribut '[d.name().apply_attributeDefault()/]'. 
   *
   * @return la valeur de l'attribut '[d.name().apply_attributeDefault()/]'.
   */
[/template]

[comment ./]
[template public commentSet(d : environment::DTO)]
  /**
   * Affectation de l'attribut '[d.name().apply_attributeDefault()/]'. 
   *
   * @param [d.name().apply_parameterMethodClassicIn()/] la valeur à affecter pour l'attribut '[d.name().apply_attributeDefault()/]'.
   */
[/template]

[comment ./]
[template public commentGet(a : environment::Attribute)]
  /** 
   * Retourne l'attribut '[a.name()/]'. 
   *
   * @return la valeur de l'attribut '[a.name()/]'.
   */
[/template]

[comment ./]
[template public commentSet(a : environment::Attribute)]
  /**
   * Affectation de l'attribut '[a.name()/]'. 
   *
   * @param [a.name().apply_parameterMethodClassicIn()/] la valeur à affecter pour l'attribut '[a.name()/]'.
   */
[/template]

[comment ./]
[template public commentClass(any :: environment::ObeoDSMObject)]
  /**
   * [any.writeDescription()/]
   *
   * @Author [any.nameAuthor()/]
   */
[/template]

[comment ./]
[template public commentInterface(any :: environment::ObeoDSMObject)]
  /**
   * [any.writeDescription()/]
   * 
   * @Author [any.nameAuthor()/]
   */
[/template]

[comment ./]
[template public commentOperation(o : soa::Operation)]
  [if (o.exists())]
    /**
     * [if (o.description.exists())][o.description.escapeComment()/][else][o.cNoDescription()/][/if].
     * 
     [for (p : soa::Parameter | o.input)]
       [p.writeParam()/]
     [/for]
     *
     [if (o.hasOutput())]
       [o.writeReturn()/]
     [/if]
     */
  [/if]
[/template]

[comment ./]
[query public writeDescription(any :: environment::ObeoDSMObject) : String = if(any.description.exists()) then 
   (any.description.escapeComment() + '.').lineCut(130, ' ') else any.cNoDescription() endif/]

[comment ./]
[query private writeParam(p : soa::Parameter) : String = '* @param ' + p.name().apply_parameterMethodClassicIn() 
  + ' : ' + if(p.description.exists()) then p.description.escapeComment() else p.cNoDescription() endif + '.'/]

[comment ./]
[query private writeReturn(o : soa::Operation) : String = '* @return ' + o.outputType() + ' : ' 
  + if (o.output->first().description.exists()) then o.output->first().description.escapeComment() else o.cNoDescription() 
  endif + '.'/]