[module widgets(	'http://www.obeonetwork.org/dsl/cinematic/3.0.0', 
					'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0',
					'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::front::core::aql::string/]
[import fr::pacman::front::core::aql::name::name/]
[import fr::pacman::front::core::aql::query::widgets/]
[import fr::pacman::front::core::aql::query::metadatas/]
[import fr::pacman::front::core::aql::name::directories /]
[import fr::pacman::front::core::service::AnnotationUtils/]
[import fr::pacman::front::cinematic::react::aql::query::widgets/]

[comment écriture d'un widget pour react dsfr./]
[template public writeOpenViewElement(ve : view::AbstractViewElement, insideHL :: Boolean)]
   [if (ve.isAccordion())]
     [ve.writeAccordion()/]
   [elseif (ve.isRadioPanel())]
     [ve.writeRadioPanel()/]
   [elseif (ve.isCheckBoxPanel())]
     [ve.writeCheckBoxPanel()/]
   [elseif (ve.isAlert())]
     [ve.writeAlert()/]
   [elseif (ve.isBadge())]
     [ve.writeBadge()/]
   [elseif (ve.isBreadCrumb())]
     [ve.writeBreadCrumb()/]
   [elseif (ve.isButton())]
     [ve.writeButton()/]
   [elseif (ve.isButtonSubmit())]
     [ve.writeButtonSubmit()/]
   [elseif (ve.isCallOut())]
     [ve.writeCallOut()/]
   [elseif (ve.isCard())]
     [ve.writeCard()/]
   [elseif (ve.isCombo())]
     [ve.writeCombo()/]
   [elseif (ve.isConnect())]
     [ve.writeConnect()/]
   [elseif (ve.isConsent())]
     [ve.writeConsent()/]
   [elseif (ve.isContent())]
     [ve.writeContent()/]
   [elseif (ve.isDisplay())]
     [ve.writeDisplay()/]
   [elseif (ve.isDropDown())]
     [ve.writeDropDown()/]
   [elseif (ve.isErrorPanel())]
     [ve.writeErrorPanel()/]
   [elseif (ve.isFollow())]
     [ve.writeFollow()/]
   [elseif (ve.isFormPanel())]
     [ve.writeForm()/]
   [elseif (ve.isHighLight())]
     [ve.writeHighLight()/]
   [elseif (ve.isInput())]
     [ve.writeInput()/]
   [elseif (ve.isLink())]
     [ve.writeLink()/]
   [elseif (ve.isLogo())]
     [ve.writeLogo()/]
   [elseif (ve.isNavigation())]
     [ve.writeNavigation()/]
   [elseif (ve.isNotice())]
     [ve.writeNotice()/]
   [elseif (ve.isPagination())]
     [ve.writePagination()/]
   [elseif (ve.isPassword())]
     [ve.writePassword()/]
   [elseif (ve.isQuote())]
     [ve.writeQuote()/]
   [elseif (ve.isRange())]
     [ve.writeRange()/]
   [elseif (ve.isSearch())]
     [ve.writeSearch()/]
   [elseif (ve.isSegmented())]
     [ve.writeSegmented()/]
   [elseif (ve.isSelect())]
     [ve.writeSelect()/]
   [elseif (ve.isShare())]
     [ve.writeShare()/]
   [elseif (ve.isSideMenu())]
     [ve.writeSideMenu()/]
   [elseif (ve.isSkipLink())]
     [ve.writeSkipLink()/]
   [elseif (ve.isStepper())]
     [ve.writeStepper()/]
   [elseif (ve.isSummary())]
     [ve.writeSummary()/]
   [elseif (ve.isTab())]
     [ve.writeTab()/]
   [elseif (ve.isTabNav())]
     [ve.writeTabNav()/]
   [elseif (ve.isTable())]
     [ve.writeTable()/]
   [elseif (ve.isTag())]
     [ve.writeTag()/]
   [elseif (ve.isTile())]
     [ve.writeTile()/]
   [elseif (ve.isToogle())]
     [ve.writeToogle()/]
   [elseif (ve.isTootip())]
     [ve.writeTootip()/]
   [elseif (ve.isTranscription())]
     [ve.writeTranscription()/]
   [elseif (ve.isTranslate())]
     [ve.writeTranslate()/]
   [elseif (ve.isUpload())]
     [ve.writeUpload()/]
   [elseif (ve.isUser())]
     [ve.writeUser()/]
   [elseif (ve.isCheckBox())]
     [ve.writeCheckBox()/]
   [elseif (ve.isRadio())]
     [ve.writeRadio()/]
   [elseif (ve.isHeaderPanel())]
     [ve.writeHeader()/]
   [elseif (ve.isFooterPanel())]
     [ve.writeFooter()/]
   [else]  
   [/if]
[/template]

[comment écriture d'un widget pour react dsfr (positionnables en CSS/JS)./]
[template public writeCloseViewElement(ve : view::AbstractViewElement, insideHL :: Boolean)]
  [if (ve.isAccordion())]
  [elseif (ve.isTable())]
    [ve.writeCloseTable()/]
  [elseif (ve.isFormPanel())]
    [ve.writeCloseForm()/]
  [elseif (ve.isUser())]
  [elseif (ve.isRadioPanel())]
    [ve.writeCloseRadioPanel(insideHL)/]
  [elseif (ve.isCheckBoxPanel())]
    [ve.writeCloseCheckBoxPanel(insideHL)/]
  [else]
  [/if]
[/template]

[template private writeAccordion (ve : view::AbstractViewElement)]
[/template]

[template private writeRadioPanel (ve : view::AbstractViewElement)]
  <RadioButtons 
    hintText="[ve.description/]"
    legend="[ve.label/]" 
    options={['['/]
[/template]

[template private writeCloseRadioPanel (ve : view::AbstractViewElement, insideHL :: Boolean)]
  [']'/]}
  [if (insideHL)]
    orientation="horizontal"
  [/if]
  state={fieldState("[ve.nameElementId()/]")}
  stateRelatedMessage={fieldMessage(
      "[ve.nameElementId()/]",
      "[ve.get_metaTextInfo()/]",
      "[ve.get_metaTextSuccess()/]"
    )}
  />
[/template]

[template private writeRadio (ve : view::AbstractViewElement)]
  {
     [if (ve.hasMetaIcon())]illustration: <img alt="illustration" src={[ve.nameElementId()/]Ico}/>,[/if]
     hintText: '[ve.description.toJSString()/]',
     label: '[ve.label.toJSString()/]',
     nativeInputProps: {
       ...register("[ve.eContainer().nameElementId()/]", { required: "[ve.eContainer().get_metaTextError()/]" }),
       value: "[ve.get_metaValue()/]",
     },
    },
[/template]
 
[template private writeCheckBoxPanel (ve : view::AbstractViewElement)]
  <Checkbox
    hintText="[ve.description/]"
    legend="[ve.label/]"
    options={['['/]
[/template]

[template private writeCloseCheckBoxPanel (ve : view::AbstractViewElement, insideHL :: Boolean)]
  [']'/]}
  [if (insideHL)]orientation="horizontal"[/if]
        state={errors.[ve.nameElementId()/] ? "error" : dirtyFields.[ve.nameElementId()/] ? "success" : "info"}
          stateRelatedMessage={
            errors.[ve.nameElementId()/]?.message ||
            (dirtyFields.[ve.nameElementId()/] ? "[ve.get_metaTextSuccess()/]" : "[ve.get_metaTextInfo()/]")
          }
  />
[/template]

[template private writeCheckBox (ve : view::AbstractViewElement)]
  [let v = ve.oclAsType(view::ViewElement)]
    {
       hintText: '[ve.description.toJSString()/]',
       label: '[ve.label.toJSString()/]',
       [if (v.required and ve.eContainer().hasMetaNbRequired())]
         nativeInputProps: {
           ...register("[ve.eContainer().nameElementId()/]", {
           validate: (value, allValues) =>
          (allValues.[ve.eContainer().nameElementId()/]?.length ?? 0) >= [ve.eContainer().get_metaRequired()/] ||
          "[ve.eContainer().get_metaTextError()/]",
           }),
           value: "[ve.get_metaValue()/]",
         },
       [else]
         nativeInputProps: {
           ...register("[ve.eContainer().nameElementId()/]"),
           value: "[ve.get_metaValue()/]",
         }
        [/if]
     },
   [/let]
[/template]

[template public writeAlert (ve : view::AbstractViewElement)]
  {globalMessage && (
    <Alert
      severity={globalMessage.severity}
      title={
        globalMessage.severity === "error"
          ? "[ve.get_metaTextError()/]"
          : globalMessage.severity === "success"
          ? "[ve.get_metaTextSuccess()/]"
          : "[ve.get_metaTextInfo()/]"
      }
      description={globalMessage.text}
      closable
    />
  )}
[/template]

[template private writeBadge (ve : view::AbstractViewElement)]
[/template]

[template private writeBreadCrumb (ve : view::AbstractViewElement)]
[/template]

[template private writeButton (ve : view::AbstractViewElement)]
  <Button>[ve.label/]</Button>
[/template]

[template private writeButtonSubmit (ve : view::AbstractViewElement)]
  <p/><Button type="submit">[ve.label/]</Button>
[/template]

[template private writeCallOut (ve : view::AbstractViewElement)]
[/template]

[template private writeCard (ve : view::AbstractViewElement)]
[/template]

[template private writeCombo (ve : view::AbstractViewElement)]
[/template]

[template private writeConnect (ve : view::AbstractViewElement)]
[/template]

[template private writeConsent (ve : view::AbstractViewElement)]
[/template]

[template private writeContent (ve : view::AbstractViewElement)]
[/template]

[template private writeDisplay (ve : view::AbstractViewElement)]
[/template]

[template private writeDropDown (ve : view::AbstractViewElement)]
[/template]

[template private writeErrorPanel (ve : view::AbstractViewElement)]
[/template]

[template private writeFollow (ve : view::AbstractViewElement)]
[/template]

[template private writeForm (ve : view::AbstractViewElement)]
   <form onSubmit={handleSubmit(onSubmit)}>
     <fieldset className="fr-fieldset" aria-labelledby="text-legend-[ve.nameElementId()/]">
       <legend className="fr-fieldset__legend" id="text-legend-[ve.nameElementId()/]">
          [ve.label/]
          <span className="fr-hint-text">[ve.description/]</span>
       </legend>
     <div style={{ width: "100%" }}>
[/template]

[template private writeCloseForm (ve : view::AbstractViewElement)]
      </div> {/* writeCloseForm */}
    </fieldset>
  </form>
[/template]

[template private writeHighLight (ve : view::AbstractViewElement)]
  <Highlight>
    [ve.description/]
  </Highlight>
[/template]

[template private writePassword (ve : view::AbstractViewElement)]
  [let v = ve.oclAsType(view::ViewElement)]
    <Input 
      label="[ve.label/]" 
      hintText="[ve.description/]"
      [ve.writeNativeInputProps('password', true)/]
    />
  [/let]
[/template]

[comment cette solution est buggée pour l'instant dans react-dsfr./]
[template private writePasswordBug (ve : view::AbstractViewElement)]
  [let v = ve.oclAsType(view::ViewElement)]
    <PasswordInput 
      label="[ve.label/]" 
      hintText="[ve.description/]"
      messages={['['/]
          {
            message: fieldMessage(
              "[ve.nameElementId()/]",
              "[ve.get_metaTextInfo()/]",
              "[ve.get_metaTextSuccess()/]"
            ),
            severity:
              fieldState("[ve.nameElementId()/]"),
          },
        [']'/]}
      [ve.writeNativeInputProps('password', false)/]
    />
  [/let]
[/template]

[template private writeInput (ve : view::AbstractViewElement)]
[let v = ve.oclAsType(view::ViewElement)]
  <Input 
    label="[ve.label/]"
    [if (ve.hasMetaButtonAddon())] addon={<Button>[ve.get_metaButtonAddOn()/]</Button>}[/if]
    [if (ve.hasMetaButtonAction())] addon={<Button iconId="fr-icon-delete-line" priority="secondary" title="Supprimer le champ"/>}[/if]
    [if (ve.hasMetaIcon())]iconId="[ve.get_metaIcon()/]"[/if]
    [if (ve.hasMetaTextArea())]textArea[/if]
    hintText="[ve.description/]"
    [ve.writeNativeInputProps('text', true)/]
  />
[/let]
[/template]

[template private writeNativeInputProps(ve : view::AbstractViewElement, type :: String, srm :: Boolean)]
  [let v = ve.oclAsType(view::ViewElement)]
    nativeInputProps={{
    ...getRegisterProps("[ve.nameElementId()/]", { 
    [if (v.required)]required: "[ve.get_metaTextError()/]", [/if]
    [if (v.hasPattern())]validate: (value) => /[ve.get_metaRegexPattern()/]/.test(value) || "[ve.get_metaTextError()/]",[/if]
    }),
    type:"[type/]",
    placeholder: "[ve.get_metaTextPlaceHolder()/]",
    maxLength: [ve.get_metaMaxlength()/]
    }}
    state={fieldState("[ve.nameElementId()/]")}
    [if (srm)]
      stateRelatedMessage={fieldMessage(
          "[ve.nameElementId()/]",
          "[v.get_metaTextInfo()/]",
          "[v.get_metaTextSuccess()/]"
       )}
     [/if]
  [/let]
[/template]

[template private writeLink (ve : view::AbstractViewElement)]
[/template]

[template private writeLogo (ve : view::AbstractViewElement)]
  <p class="fr-logo">
    [ve.label/]
  </p>
[/template]

[template private writeNavigationQuick(ve : view::AbstractViewElement)]
  [if (not ve.eAllContents(view::AbstractViewElement)
      ->select(o1 | o1.isNavigationQuick())->isEmpty())]
      [let nav = ve.eAllContents(view::AbstractViewElement)
          ->select(o2 | o2.isNavigationQuick())->first()]
         quickAccessItems={['['/]
         [for (directAccess | nav.eAllContents(view::AbstractViewElement)
           ->select(o3 | o3.isNavigationElement()))]
           {
             iconId: '[directAccess.get_metaIcon()/]',
             linkProps: {
               href: '/[directAccess.urlForPageJsx()/]'
             },
           text: '[directAccess.label.toJSString()/]'
           },
         [/for]
         [']'/]}
      [/let]
    [/if]
[/template]

[template private writeNavigation (ve : view::AbstractViewElement)]
  [if (not ve.eAllContents(view::AbstractViewElement)
    ->select(o | o.isNavigation())->isEmpty())]
    [let nav = ve.eAllContents(view::AbstractViewElement)
      ->select(o1 | o1.isNavigation())->first()]
      navigation={['['/]
      [comment accès direct sans menu./]
      [for (el | nav.eAllContents(view::AbstractViewElement)
        ->select(o3 | o3.isNavigationElement() and o3.eContainer().isNavigation()))]
        {  
           isActive: location.pathname === "/[el.urlForPageJsx()/]",
           linkProps: {
             href: '/[el.urlForPageJsx()/]'
           },
           text: '[el.label.toJSString()/]'
         },
      [/for]
      
      [comment barre de navigation avec menus et sous-menus./]
      [for (menu | nav.eAllContents(view::AbstractViewElement)
         ->select(o2 | o2.isNavigationMenu()))]
         {
           isActive: location.pathname === "/x",
           menuLinks: ['['/]
           [for (el | menu.eAllContents(view::AbstractViewElement)
             ->select(o3 | o3.isNavigationElement()))]
             {
               linkProps: {
                 href: '[el.urlForPageJsx()/]'
               },
               text: '[el.label.toJSString()/]'
             },
           [/for]
           ],
           text: '[menu.label.toJSString()/]'
         },
       [/for]
        //isActive: true,
       [comment barre de navigation mega./]
       [for (menuMega | nav.eAllContents(view::AbstractViewElement)
         ->select(o2 | o2.isNavigationMegaMenu()))]  
          {
           megaMenu: {
             categories: ['['/]
             [for (category | menuMega.eAllContents(view::AbstractViewElement)
               ->select(o3 | o3.isNavigationMegaCategory()))]
                {
                   categoryMainLink: {
                   linkProps: {
                     href: '#'
                    },
                    text: '[category.label.toJSString()/]'
                 },
                 links: ['['/]
                 [for (el | category.eAllContents(view::AbstractViewElement)
                   ->select(o4 | o4.isNavigationElement()))]
                    {
                      linkProps: {
                        href: '[el.urlForPageJsx()/]'
                      },
                      text: '[el.label.toJSString()/]'
                    },
                 [/for]  
               [']'/]     },
             [/for]
             [']'/],
           leader: {
             link: {
               linkProps: {
                 href: '#'
               },
               text: 'Voir toute la rubrique'
             },
             paragraph: '[menuMega.description.toJSString()/]',
             title: '[menuMega.label.toJSString()/]'
           }
         },
         text: '[menuMega.label.toJSString()/]'
         },
       [/for]
      [']'/]}
    [/let]
  [/if]
[/template]

[template private writeNotice (ve : view::AbstractViewElement)]
  <Notice
    description="[ve.description/]"
    iconDisplayed
    [if (ve.hasMetaClosable() and 'true'.equalsIgnoreCase(ve.get_metaClosable()))]isClosable[/if]
    link={{
      linkProps: {
        href: '#'
      },
      text: 'Plus d\'informations'
    }}
    onClose={function noRefCheck(){}}
    severity="[if (ve.hasMetaSeverity())][ve.get_metaSeverity()/][else]info[/if]"
    title="[ve.label/]"
  />
[/template]

[template private writePagination (ve : view::AbstractViewElement)]
[/template]

[template private writeQuote (ve : view::AbstractViewElement)]
[/template]

[template private writeRange (ve : view::AbstractViewElement)]
  [let v = ve.oclAsType(view::ViewElement)]
    <Range
      [if (ve.hasMetaDouble())]double[/if]
      [if (ve.hasMetaSteps())]step={[ve.get_metaSteps()/]}[/if]
      [if (ve.hasMetaPrefix())]prefix="[ve.get_metaPrefix()/]"[/if]
      [if (ve.hasMetaSuffix())]suffix="[ve.get_metaSteps()/]"[/if]
      hintText="[ve.description/]"
      label="[ve.label/]"
      max={[v.get_metaMax()/]}
      min={[v.get_metaMin()/]}
      [if (not ve.hasMetaDouble())]
        nativeInputProps={{
            defaultValue: "",
            ...register("[ve.nameElementId()/]"),
          }}
      [else]
        nativeInputProps={['['/]
           { defaultValue: "", ...register("[ve.nameElementId()/]Min") },
           { defaultValue: "", ...register("[ve.nameElementId()/]Max") }
        [']'/]}
      [/if]
    />
  [/let]
[/template]

[template private writeSearch (ve : view::AbstractViewElement)]
  <SearchBar
    defaultValue="France"
    onButtonClick={function noRefCheck(){}}
  />
[/template]

[template private writeSegmented (ve : view::AbstractViewElement)]
[/template]

[template private writeSelect (ve : view::AbstractViewElement)]
  [let v = ve.oclAsType(view::ViewElement)]
     <Select
        label="[ve.label/]"
        hint="[ve.description/]" 
        nativeSelectProps={{
          defaultValue: "",
          ...register("[ve.nameElementId()/]"[if (v.required)], { required: "[ve.get_metaTextError()/]" }[/if]),
        }}
        state={errors.[ve.nameElementId()/] ? "error" : dirtyFields.[ve.nameElementId()/] ? "success" : "info"}
           stateRelatedMessage={
           errors.[ve.nameElementId()/]?.message ||
           (dirtyFields.[ve.nameElementId()/] ? "[ve.get_metaTextSuccess()/]" : "[ve.get_metaTextInfo()/]")
        }
     >
     <option value="">Selectionnez une option</option>
     [for (option | ve.get_metaValues().tokenize(','))]
       [if (option <> null and option.trim().size() > 0  and option.index(':') > 0)]
         <option value="[option.tokenize(':')->at(1)/]">[option.tokenize(':')->at(2)/]</option>
       [/if]
     [/for]
    </Select>
  [/let]
[/template]


[template private writeShare (ve : view::AbstractViewElement)]
[/template]

[template private writeSideMenu (ve : view::AbstractViewElement)]
[/template]

[template private writeSkipLink (ve : view::AbstractViewElement)]
[/template]

[template private writeStepper (ve : view::AbstractViewElement)]
[/template]

[template private writeSummary (ve : view::AbstractViewElement)]
[/template]

[template private writeTab (ve : view::AbstractViewElement)]
[/template]

[template private writeTabNav (ve : view::AbstractViewElement)]
[/template]

[template private writeTable (ve : view::AbstractViewElement)]
  <Table
    caption="Résumé du tableau (accessibilité)"
    data={['['/]
[/template]

[template private writeCloseTable (ve : view::AbstractViewElement)]
    [']'/]}
  headers={['['/]
  [for (el | ve.oclAsType(view::ViewContainer).ownedElements)]
    '[el.name/]',
  [/for]
  [']'/]}/>
[/template]

[template private writeTabLine(ve : view::AbstractViewElement)]
[/template]

[template private writeTag (ve : view::AbstractViewElement)]
[/template]

[template private writeTile (ve : view::AbstractViewElement)]
[/template]

[template private writeToogle (ve : view::AbstractViewElement)]
  [let v = ve.oclAsType(view::ViewElement)]
    <ToggleSwitch
      label="[ve.label/]" 
      helperText="[ve.description/]"
      inputTitle="[ve.label/]" 
      labelPosition="right"
      defaultChecked={false}
      nativeInputProps={{
         ...register("[ve.nameElementId()/]"),
         valueAsBoolean: true
      }}
    />
  [/let]
[/template]

[template private writeTootip (ve : view::AbstractViewElement)]
  <Tooltip
    kind="hover"
    title="[ve.description/]"
  />
[/template]

[template private writeTranscription (ve : view::AbstractViewElement)]
[/template]

[template private writeTranslate (ve : view::AbstractViewElement)]
[/template]

[template private writeUpload (ve : view::AbstractViewElement)]
  [let v = ve.oclAsType(view::ViewElement)]
    <Upload
      multiple 
      hint="[ve.description/]"
      state="default"
      stateRelatedMessage="Text de validation / d'explication de l'erreur"
    />
  [/let]
[/template]

[template private writeUser (ve : view::AbstractViewElement)]
[/template]

[template private writeHeader(ve : view::AbstractViewElement)]
  <Header
    allowEmptySearch
    clearSearchInputOnSearch
    brandTop={<>[if (ve.hasMetaBrandTop())][ve.get_metaBrandTop()/][else]INTITULE<br />OFFICIEL[/if]</>}
    homeLinkProps={{
    href: '/',
    title: '[if (ve.hasMetaToolTip())][ve.get_metaTooltip()/]else]Accueil - Nom de l’entité[/if]'
  }}
  id="[ve.nameElementId()/]"
  serviceTagline="[ve.description/]"
  serviceTitle="[ve.label/]"
  [if (not ve.eAllContents(view::AbstractViewElement)
    ->select(o |  o.isLogo())->isEmpty())]
    [ve.writeOperatorLogo()/]
  [/if]
  [if (not ve.eAllContents(view::AbstractViewElement)
    ->select(o | o.isSearch())->isEmpty())]
    onSearchButtonClick={function noRefCheck(){}}
  [/if]
  [comment barre de navigation./]
  [ve.writeNavigation()/]
  [comment accès direct avec icone./]
  [ve.writeNavigationQuick()/]
  />
[/template]

[template private writeOperatorLogo(ve : view::AbstractViewElement)]
  operatorLogo={{
    [let l = ve.eAllContents(view::AbstractViewElement)
      ->select(o | o.isLogo())->first()]
      alt: '[l.oclAsType(view::ViewElement).description/]',
      imgUrl: opLogo,
      [if (l.has_metaLink())]
        linkProps: {
          href: '#',
          title: ''
        },
      [/if]
      orientation: [if (l.hasMetaOrientation())]'[l.get_metaOrientation()/]'[else]'horizontal'[/if]
    [/let]
  }}
[/template]

[template private writeFooter(ve : view::AbstractViewElement)]   
  <Footer
    accessibility="fully compliant"
    contentDescription="[ve.description/]"
    [if (not ve.eAllContents(view::AbstractViewElement)
      ->select(o | o.isLogo())->isEmpty())]
      [ve.writeOperatorLogo()/]
    [/if]
    termsLinkProps={{
      href: '#'
    }}
    websiteMapLinkProps={{
      href: '#'
    }}
  />
[/template]
