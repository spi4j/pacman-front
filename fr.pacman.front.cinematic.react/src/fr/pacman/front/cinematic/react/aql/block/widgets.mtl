[module widgets(	'http://www.obeonetwork.org/dsl/cinematic/3.0.0', 
					'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0')/]

[import fr::pacman::front::core::aql::query::widgets/]
[import fr::pacman::front::core::service::AnnotationUtils/]

[comment écriture d'un widget pour react dsfr./]
[template public writeOpenViewElement(ve : view::AbstractViewElement, insideHL :: Boolean)]
   [if (ve.isAccordion())]
     [ve.writeAccordion()/]
   [elseif (ve.isRadioPanel())]
     [ve.writeRadioPanel()/]
   [elseif (ve.isCheckBoxPanel())]
     [ve.writeCheckBoxPanel()/]
   [elseif (ve.isAlert())]
     [ve.writeAlert()/]
   [elseif (ve.isBadge())]
     [ve.writeBadge()/]
   [elseif (ve.isBreadCrumb())]
     [ve.writeBreadCrumb()/]
   [elseif (ve.isButton())]
     [ve.writeButton()/]
   [elseif (ve.isButtonSubmit())]
     [ve.writeButtonSubmit()/]
   [elseif (ve.isCallOut())]
     [ve.writeCallOut()/]
   [elseif (ve.isCard())]
     [ve.writeCard()/]
   [elseif (ve.isCombo())]
     [ve.writeCombo()/]
   [elseif (ve.isConnect())]
     [ve.writeConnect()/]
   [elseif (ve.isConsent())]
     [ve.writeConsent()/]
   [elseif (ve.isContent())]
     [ve.writeContent()/]
   [elseif (ve.isDisplay())]
     [ve.writeDisplay()/]
   [elseif (ve.isDropDown())]
     [ve.writeDropDown()/]
   [elseif (ve.isErrorPanel())]
     [ve.writeErrorPanel()/]
   [elseif (ve.isFollow())]
     [ve.writeFollow()/]
   [elseif (ve.isFormPanel())]
     [ve.writeForm()/]
   [elseif (ve.isHighLight())]
     [ve.writeHighLight()/]
   [elseif (ve.isInput())]
     [ve.writeInput()/]
   [elseif (ve.isInputNumber())]
     [ve.writeInputNumber()/]
   [elseif (ve.isLink())]
     [ve.writeLink()/]
   [elseif (ve.isLogo())]
     [ve.writeLogo()/]
   [elseif (ve.isNavigation())]
     [ve.writeNavigation()/]
   [elseif (ve.isNotice())]
     [ve.writeNotice()/]
   [elseif (ve.isPagination())]
     [ve.writePagination()/]
   [elseif (ve.isPassword())]
     [ve.writePassword()/]
   [elseif (ve.isQuote())]
     [ve.writeQuote()/]
   [elseif (ve.isRange())]
     [ve.writeRange()/]
   [elseif (ve.isSearch())]
     [ve.writeSearch()/]
   [elseif (ve.isSegmented())]
     [ve.writeSegmented()/]
   [elseif (ve.isSelect())]
     [ve.writeSelect()/]
   [elseif (ve.isShare())]
     [ve.writeShare()/]
   [elseif (ve.isSideMenu())]
     [ve.writeSideMenu()/]
   [elseif (ve.isSkipLink())]
     [ve.writeSkipLink()/]
   [elseif (ve.isStepper())]
     [ve.writeStepper()/]
   [elseif (ve.isSummary())]
     [ve.writeSummary()/]
   [elseif (ve.isTab())]
     [ve.writeTab()/]
   [elseif (ve.isTabNav())]
     [ve.writeTabNav()/]
   [elseif (ve.isTable())]
     [ve.writeTable()/]
   [elseif (ve.isTag())]
     [ve.writeTag()/]
   [elseif (ve.isTile())]
     [ve.writeTile()/]
   [elseif (ve.isToogle())]
     [ve.writeToogle()/]
   [elseif (ve.isTootip())]
     [ve.writeTootip()/]
   [elseif (ve.isTranscription())]
     [ve.writeTranscription()/]
   [elseif (ve.isTranslate())]
     [ve.writeTranslate()/]
   [elseif (ve.isUpload())]
     [ve.writeUpload()/]
   [elseif (ve.isUser())]
     [ve.writeUser()/]
   [elseif (ve.isCheckBox())]
     [ve.writeCheckBox()/]
   [elseif (ve.isRadio())]
     [ve.writeRadio()/]
   [else]  
   [/if]
[/template]

[comment écriture d'un widget pour react dsfr (positionnables en CSS/JS)./]
[template public writeCloseViewElement(ve : view::AbstractViewElement, insideHL :: Boolean)]
  [if (ve.isAccordion())]
  [elseif (ve.isTable())]
  [elseif (ve.isFormPanel())]
    [ve.writeCloseForm()/]
  [elseif (ve.isUser())]
  [elseif (ve.isRadioPanel())]
    [ve.writeCloseRadioPanel(insideHL)/]
  [elseif (ve.isCheckBoxPanel())]
    [ve.writeCloseCheckBoxPanel(insideHL)/]
  [else]
  [/if]
[/template]

[template private writeAccordion (ve : view::AbstractViewElement)]
[/template]

[template private writeRadioPanel (ve : view::AbstractViewElement)]
  <RadioButtons 
    hintText="[ve.description/]"
    legend="Label" 
    options={['['/]
[/template]

[template private writeCloseRadioPanel (ve : view::AbstractViewElement, insideHL :: Boolean)]
  [']'/]}
  [if (insideHL)]
    orientation="horizontal"
  [/if]
  />
[/template]

[template private writeRadio (ve : view::AbstractViewElement)]
  {
     hintText: '[ve.description/]',
     label: '[ve.label/]',
     nativeInputProps: {
       checked: value === "one",
       onChange: ()=> setValue("one")
      }
    },
[/template]
 
[template private writeCheckBoxPanel (ve : view::AbstractViewElement)]
  <Checkbox
    hintText="[ve.description/]"
    legend="[ve.label/]"
    options={['['/]
[/template]

[template private writeCloseCheckBoxPanel (ve : view::AbstractViewElement, insideHL :: Boolean)]
  [']'/]}
  [if (insideHL)]
    orientation="horizontal"
  [/if]
  state="default"
  stateRelatedMessage="State description"
  />
[/template]

[template private writeCheckBox (ve : view::AbstractViewElement)]
  {
     hintText: '[ve.description/]',
     label: '[ve.label/]',
     nativeInputProps: {
       name: 'checkboxes-[ve.name/]',
       value: 'value1'
     }
   },
[/template]

[template private writeAlert (ve : view::AbstractViewElement)]
[/template]

[template private writeBadge (ve : view::AbstractViewElement)]
[/template]

[template private writeBreadCrumb (ve : view::AbstractViewElement)]
[/template]

[template private writeButton (ve : view::AbstractViewElement)]
  <Button type="submit">[ve.label/]</Button>
[/template]

[template private writeButtonSubmit (ve : view::AbstractViewElement)]
  <Button>Envoyer</Button>
[/template]

[template private writeCallOut (ve : view::AbstractViewElement)]
[/template]

[template private writeCard (ve : view::AbstractViewElement)]
[/template]

[template private writeCombo (ve : view::AbstractViewElement)]
[/template]

[template private writeConnect (ve : view::AbstractViewElement)]
[/template]

[template private writeConsent (ve : view::AbstractViewElement)]
[/template]

[template private writeContent (ve : view::AbstractViewElement)]
[/template]

[template private writeDisplay (ve : view::AbstractViewElement)]
[/template]

[template private writeDropDown (ve : view::AbstractViewElement)]
[/template]

[template private writeErrorPanel (ve : view::AbstractViewElement)]
[/template]

[template private writeFollow (ve : view::AbstractViewElement)]
[/template]

[template private writeForm (ve : view::AbstractViewElement)]
   <form onSubmit={handleSubmit(onSubmit)}>
     <div style={{ width: "100%" }}>
[/template]

[template private writeCloseForm (ve : view::AbstractViewElement)]
    </div> {/* writeCloseForm */}
  </form>
[/template]

[template private writeHighLight (ve : view::AbstractViewElement)]
[/template]

[template private writeInput (ve : view::AbstractViewElement)]
  <Input label="[ve.label/]"
  [if (ve.has_metaTextError())] 
    state="error"
    stateRelatedMessage="[ve.get_metaTextError()/]"
  [/if]
  [if (ve.has_metaTextInfo())]
    state="info"
    stateRelatedMessage="[ve.get_metaTextInfo()/]"
  [/if]
  hintText="[ve.description/]"
  [if (ve.has_metaTextPlaceHolder())]
    nativeInputProps={{
      placeholder: '[ve.get_metaTextPlaceHolder()/]'
    }}
  [/if]
  />
[/template]

[template private writeInputNumber (ve : view::AbstractViewElement)]
  <Input label="[ve.label/]"
  [if (ve.has_metaTextError())] 
    state="error"
    stateRelatedMessage="[ve.get_metaTextError()/]"
  [/if]
  [if (ve.has_metaTextInfo())]
    state="info"
    stateRelatedMessage="[ve.get_metaTextInfo()/]"
  [/if]
  hintText="[ve.description/]"
  [if (ve.has_metaTextPlaceHolder())]
    nativeInputProps={{
      placeholder: '[ve.get_metaTextPlaceHolder()/]'
    }}
  [/if]
  nativeInputProps={{
      inputMode: 'numeric',
      pattern: '['['/]0-9[']'/]*',
      type: 'number'
    }}
  />
[/template]

[template private writeLink (ve : view::AbstractViewElement)]
[/template]

[template private writeLogo (ve : view::AbstractViewElement)]
[/template]

[template private writeNavigation (ve : view::AbstractViewElement)]
[/template]

[template private writeNotice (ve : view::AbstractViewElement)]
[/template]

[template private writePagination (ve : view::AbstractViewElement)]
[/template]

[template private writePassword (ve : view::AbstractViewElement)]
[/template]

[template private writeQuote (ve : view::AbstractViewElement)]
[/template]

[template private writeRange (ve : view::AbstractViewElement)]
[/template]

[template private writeSearch (ve : view::AbstractViewElement)]
[/template]

[template private writeSegmented (ve : view::AbstractViewElement)]
[/template]

[template private writeSelect (ve : view::AbstractViewElement)]
[/template]

[template private writeShare (ve : view::AbstractViewElement)]
[/template]

[template private writeSideMenu (ve : view::AbstractViewElement)]
[/template]

[template private writeSkipLink (ve : view::AbstractViewElement)]
[/template]

[template private writeStepper (ve : view::AbstractViewElement)]
[/template]

[template private writeSummary (ve : view::AbstractViewElement)]
[/template]

[template private writeTab (ve : view::AbstractViewElement)]
[/template]

[template private writeTabNav (ve : view::AbstractViewElement)]
[/template]

[template private writeTable (ve : view::AbstractViewElement)]
[/template]

[template private writeTag (ve : view::AbstractViewElement)]
[/template]

[template private writeTile (ve : view::AbstractViewElement)]
[/template]

[template private writeToogle (ve : view::AbstractViewElement)]
[/template]

[template private writeTootip (ve : view::AbstractViewElement)]
[/template]

[template private writeTranscription (ve : view::AbstractViewElement)]
[/template]

[template private writeTranslate (ve : view::AbstractViewElement)]
[/template]

[template private writeUpload (ve : view::AbstractViewElement)]
[/template]

[template private writeUser (ve : view::AbstractViewElement)]
[/template]
