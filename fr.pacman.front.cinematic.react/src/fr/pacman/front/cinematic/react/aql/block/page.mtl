[module page( 	'http://www.obeonetwork.org/dsl/cinematic/3.0.0', 
				'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 
				'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 
				'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0',
				'http://www.obeonetwork.org/dsl/environment/3.0.0')/]
				
[import fr::pacman::front::core::aql::name::name /]
[import fr::pacman::front::core::aql::name::directories /]
[import fr::pacman::front::core::aql::query::eobject/]
[import fr::pacman::front::cinematic::react::aql::block::widgets/]
[import fr::pacman::front::cinematic::react::aql::query::widgets/]
[import fr::pacman::front::core::aql::query::widgets/]
[import fr::pacman::front::core::service::CinematicUtils/]
[import fr::pacman::front::core::service::AnnotationUtils/]
[import fr::pacman::front::core::aql::output::resources/]

[comment aiguillage pour l'écriture d'une page typescript + code jsx (panel)./]				
[template public pageJsxImpl (vc : view::ViewContainer, vs : flow::ViewState )]
  [if (vc.isHeaderPanel() or vc.isFooterPanel())][vc.pageJsxHFImpl(vs)/][else][vc.pageJsxSDImpl(vs)/][/if]
[/template]

[comment écriture d'une page typescript + code jsx (header-footer panel)./]	
[template public pageJsxHFImpl(vc : view::ViewContainer, vs : flow::ViewState)]
  [if (vc.isHeaderPanel())]
    import { Header } from "@codegouvfr/react-dsfr/Header";
    import { useLocation } from "react-router-dom";
  [else]
    import { Footer } from "@codegouvfr/react-dsfr/Footer";
  [/if]
  [vc.writeElement(false).writePageJsx(vc)/]
[/template]

[comment écriture d'une page typescript + code jsx (standard panel)./]				
[template public pageJsxSDImpl (vc : view::ViewContainer, vs : flow::ViewState )]
  [if (vc.useForm())]
    import React from "react";
    import { useForm } from "react-hook-form";
    import { Alert } from "@codegouvfr/react-dsfr/Alert";
  [/if]
  [vc.layout.writeLayouts().writePageJsx(vc)/]
[/template]

[comment écrite du corps de la page typescript + code jsx (simple factorisation)./]
[template private writePageJsx(body : String, vc : view::ViewContainer)]
  [vc.writeAdditionalWidgetImports()/]
  
  export default function [vc.namePageJsx()/] () {
   
    [if (vc.useForm())]
      [vc.writeHandleForm()/]
    [/if]
    
    return (
      <>
        [if (vc.useForm())]
          [vc.writeAlert()/]<p/>
        [/if]
        [body/]
      </>
    );
  }
[/template]

[comment point d'entrée pour le parcours de layouts. Attention, certain composants 
		 se positionnent par css ,d'autres par js et enfin d'autres ont besoin à 
		 la fois du css et du js./]
[template private writeLayouts(l : view::Layout)]
  [let insideHl = l.isInsideHorizontalLayout()]
    [let allowCSSPos = l.isEligibleForCSSPositioning()]
      [let allowFDSPos = l.isEligibleForFDSPositioning() ]
        [l.openLayout(insideHl, allowCSSPos, allowFDSPos)/]
        [l.viewElement.writeElement(insideHl)/]
        [l.scanAllSubLayouts()/]
        [l.closeLayout(insideHl, allowCSSPos,allowFDSPos)/]
      [/let]
    [/let]
  [/let]
[/template]

[comment parcours récursif sur les layouts inclus dans les layouts (sub-layouts)./]
[template private scanAllSubLayouts(l : view::Layout)]
  [if (l <> null)][for (sl : view::Layout | l.eContents())][sl.writeLayouts()/][/for][/if]
[/template]

[comment écriture du code d'ouverture pour un layout./]
[template private openLayout(l : view::Layout, insideHl :: Boolean, allowCssPos :: Boolean,  allowFdsPos :: Boolean)]
  [if (insideHl and allowCssPos)][l.writeOpenHorizontalBloc()/][/if]
  [if (allowFdsPos)][l.writeOpenFormFieldSet()/][/if]
[/template]

[comment écriture du code de fermeture pour un layout./]
[template private closeLayout(l : view::Layout, insideHl :: Boolean, allowCssPos :: Boolean, allowFdsPos :: Boolean)]
  [if (l.isContainer())][l.viewElement.writeCloseViewElement(l.isHorizontalLayoutForJs(insideHl))/][/if]
  [if (allowFdsPos)][l.writeCloseFormFieldSet()/][/if]
  [if (insideHl and allowCssPos)][l.writeCloseHorizontalBloc()/][/if]
[/template]

[comment écriture d'un élement, qu'il s'agisse d'un conteneur ou d'un élément standard./]
[template private writeElement(ve : view::AbstractViewElement, insideHl :: Boolean)]
  [if (ve <> null)][ve.writeOpenViewElement(insideHl)/][/if]
[/template]
  
[comment écriture pour l'ouverture d'un bloc horizontal./]
[template private writeOpenHorizontalBloc (l : view::Layout)]
  [if (l.isFirstLayoutOfHorizontalContainer())]
    <div className="fr-grid-row fr-grid-row--gutters fr-grid-row--top">
  [/if]
  <div className="fr-col">
[/template]
  
[comment écriture pour la fermeture d'un bloc horizontal./]
[template private writeCloseHorizontalBloc (l : view::Layout)]
  </div>[if (l.isLastLayoutOfHorizontalContainer())]</div>[/if]
[/template] 

[comment écriture de l'ouverture pour un fieldset./]
[template private writeOpenFormFieldSet (l : view::Layout)]
  <div className="fr-fieldset__element">
[/template]

[comment écriture de la fermeture pour un fieldset./]
[template private writeCloseFormFieldSet (l : view::Layout)]
    </div> {/* Close form fieldset */}
[/template]

[comment ./]
[template public pageAppTsxImpl (r : cinematic::CinematicRoot)]
  [let useHF = r.useHFViews()]
    import { useState } from 'react'
    import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
    [if (useHF)]
      import { useLocation } from "react-router-dom";
    [/if]
    [for (v : view::ViewContainer  | r.viewPanels())]
      [if (v.isHeaderPanel())]import _Header from "[r.nameDirectoryPagesForAppTsx()/]/[v.namePageJsx()/]";[else]
      [if (v.isFooterPanel())]import _Footer from "[r.nameDirectoryPagesForAppTsx()/]/[v.namePageJsx()/]"
      [else]import [v.namePageJsx()/] from "[r.nameDirectoryPagesForAppTsx()/]/[v.namePageJsx()/]";[/if][/if]
    [/for]
    import reactLogo from './assets/react.svg'
    import viteLogo from '/vite.svg'
    import './App.css'
    
    [if (useHF)]
      [r.writeLayouts()/]
    [/if]
    
    function App() {
      return (
        <Router>
          [if (useHF)]<Layout>[/if]
          <Routes>  
            [for (v : view::ViewContainer  | r.viewPanels())]
              [if (not v.isHeaderPanel() and not v.isFooterPanel())]
                [for (url | v.urlsForReactRouter())]
                  <Route path="[url/]" element={< [v.namePageJsx()/] />}/>
                [/for]
              [/if]
            [/for]
          </Routes>
          [if (useHF)]</Layout>[/if]
        </Router>
      );
    }
    export default App
  [/let]
[/template]

[comment écriture de l'encapsulation avec en-tête et pied de page./]
[template private writeLayouts(r : cinematic::CinematicRoot)]
  function Layout({ children }: { children: React.ReactNode }) {
     const location = useLocation();
     const noLayoutRoutes = ['['/]"/fdfs"[']'/]; 
     const hideLayout = noLayoutRoutes.includes(location.pathname);
     return (
     <>
     {!hideLayout && <_Header/>}
        <div className="fr-container form-page"> {children} </div>
     {!hideLayout && <_Footer/>}
     </>
    );
  }
[/template]

[comment écriture de toute la gestion de formulaire./]
[template private writeHandleForm(vc : view::ViewContainer)]
  [let form = vc.form()]
    // --------------------------------------------------
    // Définition du type pour les valeurs du formulaire.
    // --------------------------------------------------
    type FormValues = {
      [for (e | vc.eAllContents(view::AbstractViewElement))]
       [if (e.isEligibleForFormValues())][e.name/] : [e.typeForElement()/];[/if]
      [/for]
    };
    
    // ------------------------------------------------------------------------------------
    // Initialise useForm avec le type FormValues pour bénéficier de la validation typée.
    // Récupère register pour lier les champs, handleSubmit pour gérer la soumission,
    // et errors pour afficher les messages d'erreur liés à chaque champ.
    // -----------------------------------------------------------------------------------
    const { 
      register, 
      handleSubmit, 
      formState: { errors, dirtyFields }, 
    } = useForm<FormValues>();
    
    // -----------------------------------
    // Etat générique pour message global.    // -----------------------------------  
    const ['['/]globalMessage, setGlobalMessage[']'/] = React.useState<{
      text: string;
      severity: "success" | "error" | "info" | "warning";
    } | null>(null);
    
    // ----------------------------------------------
    // Traitement métier pour la page.
    // -----------------------------------------------
    async function validateFormData(data: FormValues): Promise<boolean> {
      [protected ('validate form [vc.nameElementId()/]'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
        await new Promise((r) => setTimeout(r, 500)); // latence simulée
        return data.IdentifiantInput === "12345" && data.passwordInput === "azerty";
      [/protected]
    }
    
    // -----------------------------------------------------
    // Fonction appelée lors de la soumission du formulaire.
    // -----------------------------------------------------
    const onSubmit = async (data: FormValues) => {
      console.log("Formulaire soumis :", data);
      const isValid = await validateFormData(data);
      if (!isValid) {
        setGlobalMessage({
          text: "[form.get_metaTextError()/]",
          severity: "error",
        });
        return;
       }
       setGlobalMessage({
          text: "[form.get_metaTextSuccess()/]",
          severity: "success",
       });
    };
    
    // ----------------------------------------------
    // Permet de sécuriser la génération automatique.
    // ----------------------------------------------
    function getRegisterProps(
      fieldName: keyof FormValues,
      rules?: Parameters<typeof register>['['/]1[']'/]) {
      return { ...register(fieldName, rules) };
     }
    
    // ---------------------------------------
    // Centralisation de la gestion des états.
    // ---------------------------------------
    function fieldState(fieldName: keyof FormValues) {
       return errors['['/]fieldName[']'/]
         ? "error"
         : dirtyFields['['/]fieldName[']'/]
         ? "success"
         : "info";
    }
    
    // ----------------------------------------------
    // Centralisation pour l'affichage des messages.
    // ----------------------------------------------
    function fieldMessage(
       fieldName: keyof FormValues,
       defaultMessage: string,
       successMessage: string
     ) {
        return (
         errors['['/]fieldName[']'/]?.message ||
         (dirtyFields['['/]fieldName[']'/] ? successMessage : defaultMessage)
       );
    }
  [/let]
[/template]

[comment écriture des imports pour la page (panel / header / footer / etc..)./]
[template private writeAdditionalWidgetImports(vc : view::ViewContainer)]
  [for (ve | vc.get_viewElementForImports())]
    import { [ve.widget.implementation.trim()/] } from "[ve.reactUriForElement()/]/[ve.widget.implementation.trim()/]";
  [/for]
  [let logos = vc.eAllContents(view::AbstractViewElement)
    ->select(e | e.isLogo())]
    [if (not logos->isEmpty())]
      [let logo = logos->first()]
        import opLogo from '[logo.nameDirImages()/]/[logo.get_metaImg()/]';
      [/let]
    [/if]
  [/let]
  [let radios = vc.eAllContents(view::AbstractViewElement)
    ->select(e | e.isRadio() and e.has_metaIcon())]
    [if (not radios->isEmpty())]
      [for (r | radios)]
        import [r.nameElementId()/]Ico from '[r.nameDirImages()/]/[r.get_metaIcon()/]';
      [/for]
    [/if]
  [/let]
[/template]
