[module page( 	'http://www.obeonetwork.org/dsl/cinematic/3.0.0', 
				'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 
				'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 
				'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0')/]
				
[import fr::pacman::front::core::aql::name::name /]
[import fr::pacman::front::core::aql::name::directories /]
[import fr::pacman::front::core::aql::query::eobject/]
[import fr::pacman::front::cinematic::react::aql::block::widgets/]
[import fr::pacman::front::core::aql::query::widgets/]
[import fr::pacman::front::core::service::CinematicUtils/]
				
[comment écriture d'une page typescript + code jsx (panel)./]				
[template public pageJsxImpl (vc : view::ViewContainer, vs : flow::ViewState )]
  
  [if (vc.useForms())]
    import { useState } from "react";
    import { useForm } from "react-hook-form";
  [/if]
  [for (ve | vc.viewElementForImports()->reject(o | o.isFormPanel()))]
    import { [ve.widget.implementation.trim()/] } from "@codegouvfr/react-dsfr/[ve.widget.implementation.trim()/]";
  [/for]
  
  export default function [vc.namePageJsx()/] () {
  
  	[if (vc.useForms())]
        const { register, handleSubmit, formState: { errors } } = useForm();
        const ['['/]value, setValue[']'/] = useState("");
        const onSubmit = (data) => {
        console.log(data);
      };
  	[/if]
  
    return (
      <>
      [comment vc.scanHorizontalLayouts()/]
  	  [vc.layout.writeLayouts()/]
      </>
    );
  }
[/template]

[comment point d'entrée./]
[template private writeLayouts(l : view::Layout)]
  [let insideHl = l.insideHorizontalLayout()]
    [if (insideHl)][l.writeOpenHorizontalBloc()/][/if]
    [l.viewElement.writeElement()/]
    [l.scanAllSubLayouts()/]
    [l.closeLayout(insideHl)/]
  [/let]
[/template]

[comment parcours récursif sur les layouts inclus dans les layouts (sub-layouts)./]
[template private scanAllSubLayouts(l : view::Layout)]
  [for (sl : view::Layout | l.eContents())]
    [sl.writeLayouts()/]
  [/for]
[/template]

[comment écriture du code de fermeture pour un layout./]
[template private closeLayout(l : view::Layout, insideHl :: Boolean)]
  [if (l.isContainer())][l.viewElement.writeCloseViewElement()/][/if]
  [if (insideHl)][l.writeCloseHorizontalBloc()/][/if]
[/template]

[comment écriture d'un élement, qu'il s'agisse d'un conteneur ou d'un élément standard./]
[template private writeElement(ve : view::AbstractViewElement)]
  [if (ve <> null)][ve.writeViewElement()/][/if]
[/template]
  
[comment écriture pour l'ouverture d'un bloc horizontal./]
[template private writeOpenHorizontalBloc (l : view::Layout)]
  [if (l.isFirstLayoutOfHorizontalContainer())]
    <div className="fr-grid-row fr-grid-row--gutters">
  [/if]
  <div className="fr-col">
  [/template]
  
[comment écriture pour la fermeture d'un bloc horizontal./]
[template private writeCloseHorizontalBloc (l : view::Layout)]
  </div>[l.writeForDebug('element')/]
  [if (l.isLastLayoutOfHorizontalContainer())]</div>[l.writeForDebug('bloc')/][/if]
[/template] 

[template private writeForDebug (l : view::Layout, s : String)]
  {/* [if (l.viewElement <> null)][l.viewElement.name/][else]'virtual'[/if] -> [s/]*/}
[/template]
  
[comment ./]
[template public pageAppTsxImpl (r : cinematic::CinematicRoot)]
  import { useState } from 'react'
  import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
  import { Button } from "@codegouvfr/react-dsfr/Button";
  import { Header, Footer } from "@codegouvfr/react-dsfr";
  
  [for (v : view::ViewContainer  | r.viewPanels())]
    import [v.namePageJsx()/] from "[r.nameDirectoryPagesForAppTsx()/]/[v.namePageJsx()/]";
  [/for]

  import reactLogo from './assets/react.svg'
  import viteLogo from '/vite.svg'
  import './App.css'

  function App() {
    return (
      <Router>
        <Routes>  
          [let main = r.get_rootState()]
            [for (v : view::ViewContainer  | r.viewPanels())]
              <Route path="[v.urlPageJsx(main)/]" element={<[v.namePageJsx()/] />} />
            [/for]
          [/let]
        </Routes>
      </Router>
    );
  }
  export default App
[/template]

