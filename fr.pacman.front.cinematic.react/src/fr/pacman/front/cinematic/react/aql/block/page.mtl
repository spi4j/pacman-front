[module page( 	'http://www.obeonetwork.org/dsl/cinematic/3.0.0', 
				'http://www.obeonetwork.org/dsl/cinematic/view/1.0.0', 
				'http://www.obeonetwork.org/dsl/cinematic/flow/1.0.0', 
				'http://www.obeonetwork.org/dsl/cinematic/toolkits/1.0.0',
				'http://www.obeonetwork.org/dsl/environment/3.0.0')/]
				
[import fr::pacman::front::core::aql::name::name /]
[import fr::pacman::front::core::aql::name::directories /]
[import fr::pacman::front::core::aql::query::eobject/]
[import fr::pacman::front::cinematic::react::aql::block::widgets/]
[import fr::pacman::front::cinematic::react::aql::query::widgets/]
[import fr::pacman::front::core::aql::query::widgets/]
[import fr::pacman::front::core::service::CinematicUtils/]
				
[comment écriture d'une page typescript + code jsx (panel)./]				
[template public pageJsxImpl (vc : view::ViewContainer, vs : flow::ViewState )]
  
  [if (vc.useForms())]
    import { useForm } from "react-hook-form";
  [/if]
  [for (ve | vc.viewElementForImports()->reject(o | o.isFormPanel()))]
    import { [ve.widget.implementation.trim()/] } from "[ve.reactUriForElement()/]/[ve.widget.implementation.trim()/]";
  [/for]
  
  export default function [vc.namePageJsx()/] () {
  
  	[if (vc.useForms())]
      // Définition du type des valeurs du formulaire.
      
      type FormValues = {
        [for (e : view::ViewElement | vc.eAllContents(view::ViewElement))]
         [if (e.isEligibleForFormValues())][e.name/] : [e.type.name.toLower()/];[/if]
        [/for]
      };
      
      // Initialise useForm avec le type FormValues pour bénéficier de la validation typée.
      // Récupère register pour lier les champs, handleSubmit pour gérer la soumission,
      // et errors pour afficher les messages d'erreur liés à chaque champ.
      
      const { 
        register, 
        handleSubmit, 
        formState: { errors, dirtyFields }, 
      } = useForm<FormValues>();
      
      //'onSubmit' est la fonction appelée lors de la soumission du formulaire,
      // affichant les données saisies dans la console pour vérification.
      
      const onSubmit = (data: FormValues) => {
        console.log("Formulaire soumis :", data);
      };
      
      // Permet de sécuriser la génération automatique.
      
      function getRegisterProps(
        fieldName: keyof FormValues,
        rules?: Parameters<typeof register>['['/]1[']'/]) {
        return { ...register(fieldName, rules) };
       }
      
      // Centralisation de la gestion des états.
      
      function fieldState(fieldName: keyof FormValues) {
         return errors['['/]fieldName[']'/]
           ? "error"
           : dirtyFields['['/]fieldName[']'/]
           ? "success"
           : "info";
      }
       
      // Centralisation pour l'affichage des messages.
      
      function fieldMessage(
         fieldName: keyof FormValues,
         defaultMessage: string,
         successMessage: string
       ) {
          return (
           errors['['/]fieldName[']'/]?.message ||
           (dirtyFields['['/]fieldName[']'/] ? successMessage : defaultMessage)
         );
      }
  	[/if]
  
    return (
      <>
  	  [vc.layout.writeLayouts()/]
      </>
    );
  }
[/template]

[comment point d'entrée. Attention, certain composants se positionnent par css ,d'autres par js 
		 et enfin d'autres ont besoin à la fois du css et du js./]
[template private writeLayouts(l : view::Layout)]
  [let insideHl = l.insideHorizontalLayout()]
    [let allowCSSPos = l.isEligibleForCSSPositioning()]
      [l.openLayout(insideHl, allowCSSPos)/]
      [l.viewElement.writeElement(insideHl)/]
      [l.scanAllSubLayouts()/]
      [l.closeLayout(insideHl, allowCSSPos)/]
    [/let]
  [/let]
[/template]

[comment parcours récursif sur les layouts inclus dans les layouts (sub-layouts)./]
[template private scanAllSubLayouts(l : view::Layout)]
  [if (l <> null)][for (sl : view::Layout | l.eContents())][sl.writeLayouts()/][/for][/if]
[/template]

[comment écriture du code d'ouverture pour un layout./]
[template private openLayout(l : view::Layout, insideHl :: Boolean, allowCssPos :: Boolean)]
  [if (insideHl and allowCssPos)][l.writeOpenHorizontalBloc()/][/if]
[/template]

[comment écriture du code de fermeture pour un layout./]
[template private closeLayout(l : view::Layout, insideHl :: Boolean, allowCssPos :: Boolean)]
  [if (l.isContainer())][l.viewElement.writeCloseViewElement(insideHl)/][/if]
  [if (insideHl and allowCssPos)][l.writeCloseHorizontalBloc()/][/if]
[/template]

[comment écriture d'un élement, qu'il s'agisse d'un conteneur ou d'un élément standard./]
[template private writeElement(ve : view::AbstractViewElement, insideHl :: Boolean)]
  [if (ve <> null)][ve.writeOpenViewElement(insideHl)/][/if]
[/template]
  
[comment écriture pour l'ouverture d'un bloc horizontal./]
[template private writeOpenHorizontalBloc (l : view::Layout)]
  [if (l.isFirstLayoutOfHorizontalContainer())]
    <div className="fr-grid-row fr-grid-row--gutters">
  [/if]
  <div className="fr-col">
[/template]
  
[comment écriture pour la fermeture d'un bloc horizontal./]
[template private writeCloseHorizontalBloc (l : view::Layout)]
  </div>[if (l.isLastLayoutOfHorizontalContainer())]</div>[/if]
[/template] 

[comment ./]
[template public pageAppTsxImpl (r : cinematic::CinematicRoot)]
  import { useState } from 'react'
  import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
  import { Button } from "@codegouvfr/react-dsfr/Button";
  import { Header, Footer } from "@codegouvfr/react-dsfr";
  
  [for (v : view::ViewContainer  | r.viewPanels())]
    import [v.namePageJsx()/] from "[r.nameDirectoryPagesForAppTsx()/]/[v.namePageJsx()/]";
  [/for]

  import reactLogo from './assets/react.svg'
  import viteLogo from '/vite.svg'
  import './App.css'

  function App() {
    return (
      <Router>
        <Routes>  
          [let main = r.get_rootState()]
            [for (v : view::ViewContainer  | r.viewPanels())]
              <Route path="[v.urlPageJsx(main)/]" element={<[v.namePageJsx()/] />} />
            [/for]
          [/let]
        </Routes>
      </Router>
    );
  }
  export default App
[/template]

